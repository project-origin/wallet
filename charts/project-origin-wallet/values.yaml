# Default values for project-origin-wallet.

# image defines the image configuration for the wallet server
image:

  # repository defines the image repository to use
  repository: ghcr.io/project-origin/wallet-server

  # tag defines the image tag to use, defaults to the chart appVersion
  tag:

# service holds the configuration for the service
service:
  # type is the type of service to create, allowed values are (ClusterIP | NodePort | LoadBalancer)
  type: ClusterIP
  # nodePort is the port to expose the service on if type is NodePort
  nodePort:

# config holds general configuration for the wallet server
config:
  # externalUrl defines the external url to use for the wallet server, this should be the publically accessible and resolvable url of the wallet server.
  # example: http://wallet.example.com/api or https://example.com/wallet/api
  # This should include the pathBase
  externalUrl:

  # pathBase defines the base part of all paths in the api of the wallet server, defaults to /api
  pathBase: /api

  # auth holds the configuration for the authentication of the wallet server
  auth:
    # type defines the type of authentication to use, allowed values are (jwt | header)
    type: jwt

    # disables the jwt authentication, and sets the subject of the call from a header. This requires authentication and authorization to be done by another system.
    header:
      headerName: ""

    # jwt defines the configuration for the authentication of jwt tokens
    jwt:
      # audience defines the audience to use for the jwt tokens, defaults to empty string, which means the audience is not checked
      audience: ""

      # authority defines the authority to use for the jwt tokens, defaults to empty string, should be set to a authority
      # example "https://example.com/auth" where it will pull the "/.well-known/openid-configuration" information from.
      authority: ""

      # enableScopeValidation determines if scope validation is enabled, defaults to true, if set to true then scope validation is enabled
      enableScopeValidation: true

      # allowAnyJwtToken determines if any jwt token is allowed, defaults to false, if set to true then any jwt token is allowed, NOT RECOMMENDED FOR PRODUCTION!
      allowAnyJwtToken: false

      # issuer defines a list of valid issuers for the jwt tokens, disabled if authority url is set
      issuers: []
        # example
        # - # name defines the name of the issuer
        #   name: test
        #   # type defines the type of the key used, allowed values are (rsa |Â ecdsa)
        #   type: rsa
        #   # pemFileName defines the name of the file containing the pem encoded key
        #   pemFileName: /etc/keyfile.pem

# otlp holds the configuration for the opentelemetry collector
otlp:
  # enabled determines if the opentelemetry collector is enabled
  enabled: false
  # endpoint defines the endpoint of the opentelemetry collector, example "http://otel-collector:4317"
  endpoint: "http://opentelemetry-collector.otel-collector:4317"

# messageBroker holds the configuration for the message broker
messageBroker:
  # type defines the type of message broker to use, allowed values are (inMemory | rabbitmq | rabbitmqOperator)
  type:

  # rabbitmq defines the rabbitmq configuration for the message broker if type is rabbitmq, with rabbitmqOperator or inMemory this is ignored
  rabbitmq:
    # host defines the host of the rabbitmq server in url format 'http://localhost:15672/'
    host:
    # port defines the port of the rabbitmq server, defaults to 5672
    port: 5672
    # username defines the username to use to connect to the rabbitmq server
    username:
    # password defines the password to use to connect to the rabbitmq server
    password:

# wallet defines the deployment configuration for the wallet server
wallet:
  # replicas defines the number of wallet server instances to run
  replicaCount: 3

  # -- Additional volume mounts to the wallet-server container
  volumeMounts: []
  #  - name: jwt-secret
  #    mountPath: /etc/keyfile.pem
  #    subPath: keyfile

  # -- Additional volumes to the wallet-server container
  volumes: []
  #  - name: jwt-secret
  #    secret:
  #      secretName: my-jwt-secret

 # Registries is a list of all the known registries in the network
registries: []
  # example
  # - name: test
  #   address: http://test-registry:80

# persistence defines the persistence configuration for the wallet server
persistence:

  # type defines which database to use. "CloudNativePG" for built-in PostgreSQL or "BYOD" (Bring Your Own Database) for using an external PostgreSQL database. Only PostgreSQL is supported.
  type: "CloudNativePG"

  # cloudNativePG determines if the database is created as a cloud native postgresql instance
  cloudNativePG:

    # name defines the name of the cloud native postgresql instance
    name: cnpg-wallet-db

    # owner defines the owner of the database
    owner: app

    # database defines the name of the database to create
    database: wallet-database

    # replicas defines the number of database instances to run
    replicas: 3

    # storage defines the storage configuration for the database
    size: 10Gi

  # BYOD (Bring Your Own Database) configuration
  byod:

    # Create a secret with the DB connection info and provide the secret name here
    secretName: ""
    # Specify the key within the secret that contains the DB connection string
    secretKey: ""
