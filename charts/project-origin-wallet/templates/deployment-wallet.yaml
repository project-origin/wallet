---
{{- $tag := .Values.image.tag | default .Chart.AppVersion -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: po-wallet-deployment
  namespace: {{ .Release.Namespace }}
  labels:
    app: po-wallet
spec:
  replicas: {{ .Values.wallet.replicaCount }}
  selector:
    matchLabels:
      app: po-wallet
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: po-wallet
    spec:
      serviceAccountName: wallet-migration-waiter
      initContainers:
        - name: wait-for-migration
          image: groundnuty/k8s-wait-for:v2.0 # TODO verify this image
          args:
            - "job"
            - "po-wallet-migrate-job-{{ .Values.image.tag | default .Chart.AppVersion | replace "." "-" }}"
      containers:
        - name: po-wallet
          image: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
          args:
            - "--serve"
          env:
            - name: ServiceOptions__EndpointAddress
              value: {{ required "A valid externalUrl is required!"  .Values.config.externalUrl }}
            - name: ServiceOptions__PathBase
              value: {{ .Values.config.pathBase }}
          {{- if eq .Values.messageBroker.type "inMemory" }}
            - name: MessageBroker__Type
              value: InMemory
          {{- else if eq .Values.messageBroker.type "rabbitmq" }}
            - name: MessageBroker__Type
              value: RabbitMq
            - name: MessageBroker__RabbitMQ__Host
              value: {{ required "A valid messageBroker rabbitmq host is required!" .Values.messageBroker.rabbitmq.host }}
            - name: MessageBroker__RabbitMQ__Port
              value: {{ required "A valid messageBroker rabbitmq port is required!" .Values.messageBroker.rabbitmq.port }}
            - name: MessageBroker__RabbitMQ__Username
              value: {{ required "A valid messageBroker rabbitmq username is required!" .Values.messageBroker.rabbitmq.username }}
            - name: MessageBroker__RabbitMQ__Password
              value: {{ required "A valid messageBroker rabbitmq password is required!" .Values.messageBroker.rabbitmq.password }}
          {{- else if eq .Values.messageBroker.type "rabbitmqOperator" }}
            - name: MessageBroker__Type
              value: RabbitMq
            - name: MessageBroker__RabbitMQ__Host
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-rabbitmq-default-user
                  key: host
            - name: MessageBroker__RabbitMQ__Port
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-rabbitmq-default-user
                  key: port
            - name: MessageBroker__RabbitMQ__Username
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-rabbitmq-default-user
                  key: username
            - name: MessageBroker__RabbitMQ__Password
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-rabbitmq-default-user
                  key: password
          {{- else}}
            {{- fail "messageBroker type must be one of (inMemory | rabbitmq | rabbitmqOperator)" }}
          {{- end }}

          {{- range .Values.registries }}
            - name: RegistryUrls__{{ .name }}
              value: {{ .address }}
          {{- end }}

          {{- if eq .Values.persistence.type "CloudNativePG" }}
            - name: DB_HOST
              value: {{ .Values.persistence.cloudNativePG.name }}-rw
            - name: DB_PORT
              value: "5432"
            - name: DB_DATABASE
              value: {{ .Values.persistence.cloudNativePG.database }}
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.persistence.cloudNativePG.name }}-app
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.persistence.cloudNativePG.name }}-app
                  key: password
            - name: ConnectionStrings__Database
              value: "Host=$(DB_HOST);Port=$(DB_PORT);Database=$(DB_DATABASE);Username=$(DB_USERNAME);Password=$(DB_PASSWORD);"
          {{- else if eq .Values.persistence.type "BYOD" }}
            - name: ConnectionStrings__Database
              valueFrom:
                secretKeyRef:
                  name: {{ required "BYOD is selected as the database type, but no secretName is provided in persistence.byod" .Values.persistence.byod.secretName }}
                  key: {{ required "BYOD is selected as the database type, but no secretKey is provided in persistence.byod" .Values.persistence.byod.secretKey }}
          {{- else }}
            {{- fail "Unsupported database type specified. Please specify 'persistence.type' as either 'CloudNativePG' or 'BYOD'." }}
          {{- end }}

          # Authentication
            - name: auth__type
              value: {{ .Values.config.auth.type }}
          {{- if eq .Values.config.auth.type "header" }}
            - name: auth__header__headerName
              value: {{ .Values.config.auth.header.headerName }}
          {{- else if eq .Values.config.auth.type "jwt" }}
            - name: auth__jwt__audience
              value: {{ .Values.config.auth.jwt.audience }}
            - name: auth__jwt__authority
              value: {{ .Values.config.auth.jwt.authority | quote }}
            - name: auth__jwt__allowAnyJwtToken
              value: {{ .Values.config.auth.jwt.allowAnyJwtToken | quote }}
            - name: auth__jwt__enableScopeValidation
              value: {{ .Values.config.auth.jwt.enableScopeValidation | quote }}
            {{- range  $i, $issuer := .Values.config.auth.jwt.issuers }}
            - name: auth__jwt__issuers__{{ $i }}__name
              value: {{ $issuer.name }}
            - name: auth__jwt__issuers__{{ $i }}__type
              value: {{ $issuer.type }}
            - name: auth__jwt__issuers__{{ $i }}__pemFileName
              value: {{ $issuer.pemFileName }}
            {{- end }}
          {{- else}}
            {{- fail "Unsupported auth type specified. Please specify 'auth.type' as either 'jwt' or 'header'." }}
          {{- end }}

            # OpenTelemetry Collector Configuration
            - name: Otlp__Enabled
              value: {{ .Values.otlp.enabled | quote }}
            - name: Otlp__Endpoint
              value: {{ .Values.otlp.endpoint }}

          volumeMounts:
          {{- with .Values.wallet.volumeMounts }}
            {{- toYaml . | nindent 10 }}
          {{- end }}

      volumes:
      {{- with .Values.wallet.volumes }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
